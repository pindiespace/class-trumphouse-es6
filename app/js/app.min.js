!function e(t,n,o){function r(a,u){if(!n[a]){if(!t[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=n[a]={exports:{}};t[a][0].call(l.exports,function(e){var n=t[a][1][e];return r(n?n:e)},l,l.exports,e,t,n,o)}return n[a].exports}for(var i="function"==typeof require&&require,a=0;a<o.length;a++)r(o[a]);return r}({1:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("./util"),u=o(a),s=e("./gameobject"),c=(o(s),e("./user")),l=(o(c),e("./trump")),f=o(l),d=e("./voter"),p=o(d),h=e("./candidate"),m=o(h),y=e("./arena"),b=o(y),g=function(){function e(t,n,o,i,a,s,c){r(this,e),console.log("in Trumphouse constructor"),this.$=a,this.window=s,this.document=c,this.util=new u["default"],this.BEGINNER=1,this.EXPERIENCED=2,this.arena=new b["default"](i.arena1),this.trump=new f["default"](o.trump1),this.voter=new p["default"](n.voter1),this.candidates=[];for(var l in t)console.log("i is a:"+l),this.candidates.push(new m["default"](t[l]))}return i(e,[{key:"createCandidateGrid",value:function(){for(var e=0,t=0;t<this.candidates.length;t++){var n=this.candidates[t].dom.elem;parseFloat(window.getComputedStyle(n).getPropertyValue("height"));n.style.top=e+"px",e+=75}}},{key:"init",value:function(){this.arena.attach(document.body),this.trump.attach(this.arena.dom),this.trump.dom.elem.style.top="200px",this.voter.attach(this.arena.dom),this.voter.dom.elem.style.top="200px";for(var e=0;e<this.candidates.length;e++)this.candidates[e].attach(this.arena.dom);this.createCandidateGrid(),window.addEventListener("keydown",function(e){console.log("keyCode:"+e.keyCode);var t=this.voter.dom.elem.style;switch(e.keyCode){case 32:break;case 37:break;case 38:console.log("UP top:"+t.top),t.top=parseInt(t.top)-1+"px";break;case 39:break;case 40:console.log("DOWN:"+t.top),t.top=parseInt(t.top)+1+"px"}}.bind(this))}}]),e}();n["default"]=g;var w={trump1:{name:"Donald J. Trump",img:"/img/pngs/players/trump.png",power:"10"}},v={voter1:{name:"John Q. Public",img:"/img/pngs/chimpanzee.png"}},_={arena1:{backgroundId:"bkgnd-1992",whitehouseId:"whitehouse"},arena2:{backgroundId:"bkgnd-1948",whitehouseId:"whitehouse"}},O={clinton:{name:"Hillary Clinton",img:"img/pngs/bricks/clinton.png",power:"7"},cruz:{name:"Ted Cruz",img:"img/pngs/bricks/cruz.png",power:"5"},kasich:{name:"John Kasich",img:"img/pngs/bricks/kasich.png",power:"3"},sanders:{name:"Bernie Sanders",img:"img/pngs/bricks/sanders.png",power:"7"},stein:{name:"Jill Stein",img:"img/pngs/bricks/stein.png",power:"7"},johnson:{name:"Gary Johnson",img:"img/pngs/bricks/johnson.png",power:"7"}},k=new g(O,v,w,_,jQuery,window,document);window.trumphouse=k},{"./arena":2,"./candidate":3,"./gameobject":5,"./trump":6,"./user":7,"./util":8,"./voter":9}],2:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(t){o(this,e),this.dom=document.createElement("div"),this.dom.className="main",this.dom.style.zIndex="-1",this.dom.bkgnd=document.createElement("div"),this.dom.bkgnd.className="arena-primary-bkgnd",this.dom.bkgnd.id=t.backgroundId,this.dom.bkgnd.style.zIndex="-1",this.dom.whitehouse=document.createElement("div"),this.dom.whitehouse.className="arena-whitehouse-bkgnd",this.dom.whitehouse.id=t.whitehouseId,this.dom.whitehouse.style.zIndex="-1",this.dom.appendChild(this.dom.bkgnd),this.dom.appendChild(this.dom.whitehouse),console.log("in Arena constructor")}return r(e,[{key:"attach",value:function(e){e.appendChild(this.dom)}}]),e}();n["default"]=i},{}],3:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var u=e("./user"),s=o(u),c=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.dom.elem.className="candidate",console.log("in Candidate constructor"),n}return a(t,e),t}(s["default"]);n["default"]=c},{"./user":7}],4:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function i(e){o(this,i),this.src=e,this.elem=document.createElement("div"),this.img=document.createElement("img"),this.img.onload=function(e){console.log("DOMPiece image loaded, src:"+e.target.src)},this.img.src=e,this.elem.appendChild(this.img),console.log("in DOMPiece constructor")};n["default"]=r},{}],5:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=e("./dompiece"),u=o(a),s=function(){function e(t){r(this,e),console.log("in GameObject constructor"),this.dom=new u["default"](t),this.dom.elem.style.position="absolute",this.position={top:0,left:0},this.motion={dx:0,dy:0}}return i(e,[{key:"valid",value:function(){return!!this.dom}},{key:"setPosition",value:function(e,t){console.log("setting position to x:"+e+" y:"+t)}},{key:"setMotion",value:function(e,t){console.log("setting motion to x:"+e+" y:"+t)}},{key:"attach",value:function(e){e.appendChild(this.dom.elem)}},{key:"detach",value:function(){}},{key:"show",value:function(){}},{key:"hide",value:function(){}}]),e}();n["default"]=s},{"./dompiece":4}],6:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var u=e("./user"),s=o(u),c=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.dom.elem.className="trump",console.log("in Trump constructor"),n}return a(t,e),t}(s["default"]);n["default"]=c},{"./user":7}],7:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var u=e("./dompiece"),s=o(u),c=e("./gameobject"),l=o(c),f=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.dom=new s["default"](e.img),n.dom.elem.style.zIndex="-1",console.log("in User constructor"),n}return a(t,e),t}(l["default"]);n["default"]=f},{"./dompiece":4,"./gameobject":5}],8:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=function(){function e(){o(this,e),console.log("in Util constructor")}return r(e,[{key:"isOldIE",value:function(){var e=window.navigator.userAgent,t=e.indexOf("MSIE ");if(t>0){var n=parseInt(e.substring(t+5,e.indexOf(".",t)),10);if(n<9)return n}return!1}},{key:"rgb2hex",value:function(e){return e=e.match(/^rgba?[\s+]?\([\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?,[\s+]?(\d+)[\s+]?/i),e&&4===e.length?"#"+("0"+parseInt(e[1],10).toString(16)).slice(-2)+("0"+parseInt(e[2],10).toString(16)).slice(-2)+("0"+parseInt(e[3],10).toString(16)).slice(-2):""}}]),e}();n["default"]=i},{}],9:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var u=e("./user"),s=o(u),c=function(e){function t(e){r(this,t);var n=i(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.dom.elem.className="voter",console.log("in Voter constructor"),n}return a(t,e),t}(s["default"]);n["default"]=c},{"./user":7}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
