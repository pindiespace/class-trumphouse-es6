!function e(t,n,o){function r(i,c){if(!n[i]){if(!t[i]){var a="function"==typeof require&&require;if(!c&&a)return a(i,!0);if(u)return u(i,!0);var f=new Error("Cannot find module '"+i+"'");throw f.code="MODULE_NOT_FOUND",f}var s=n[i]={exports:{}};t[i][0].call(s.exports,function(e){var n=t[i][1][e];return r(n?n:e)},s,s.exports,e,t,n,o)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<o.length;i++)r(o[i]);return r}({1:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),i=e("./util"),c=o(i),a=e("./gameobject"),f=(o(a),e("./user")),s=(o(f),function(){function e(t,n,o){r(this,e),console.log("in Trumphouse constructor"),this.$=t,this.window=n,this.document=o,this.util=new c["default"],this.BEGINNER=1,this.EXPERIENCED=2,this.candidates=[]}return u(e,[{key:"init",value:function(){}}]),e}());n["default"]=s,window.trumphouse=new s(jQuery,window,document)},{"./gameobject":2,"./user":3,"./util":4}],2:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function u(){o(this,u),console.log("in GameObject constructor")};n["default"]=r},{}],3:[function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{"default":e}}function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(n,"__esModule",{value:!0});var c=e("./gameobject"),a=o(c),f=function(e){function t(){r(this,t);var e=u(this,(t.__proto__||Object.getPrototypeOf(t)).call(this));return console.log("in User constructor"),e}return i(t,e),t}(a["default"]);n["default"]=f},{"./gameobject":2}],4:[function(e,t,n){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var r=function u(){o(this,u),console.log("in Util constructor")};n["default"]=r},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
